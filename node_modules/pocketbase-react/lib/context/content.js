"use strict";

exports.__esModule = true;
exports.ContentProvider = exports.ContentContext = void 0;
var store = _interopRequireWildcard(require("../store/store"));
var React = _interopRequireWildcard(require("react"));
var _useClientContext = require("../hooks/useClientContext");
var _actions = require("../store/actions");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ContentContext = (0, React.createContext)({});
exports.ContentContext = ContentContext;
const ContentProvider = props => {
  const client = (0, _useClientContext.useClientContext)();
  const dispatch = store.useAppDispatch;
  function tempErrorHandler(error) {
    var _error$originalError;
    // TODO: Handle error
    // IDEA: Create new ErrorContext and Update it with error
    if ((error == null ? void 0 : (_error$originalError = error.originalError) == null ? void 0 : _error$originalError.name) !== 'AbortError') {
      console.log('Error in content provider', JSON.stringify(error));
    }
  }
  const actions = {
    subscribe: async collectionName => {
      await (client == null ? void 0 : client.realtime.subscribe(collectionName, event => {
        switch (event.action) {
          case 'create':
            dispatch(_actions.recordsAction.addRecord(collectionName, event.record));
            break;
          case 'update':
            dispatch(_actions.recordsAction.updateRecord(collectionName, event.record));
            break;
          case 'delete':
            dispatch(_actions.recordsAction.deleteRecord(collectionName, event.record));
            break;
          default:
            break;
        }
      }).then(() => {
        dispatch(_actions.subscriptionsAction.addSubscription(collectionName));
      }).catch(tempErrorHandler));
    },
    unsubscribe: async collectionName => {
      if (collectionName) {
        await (client == null ? void 0 : client.realtime.unsubscribe(collectionName).then(() => {
          dispatch(_actions.subscriptionsAction.deleteSubscription(collectionName));
        }).catch(tempErrorHandler));
      } else {
        await (client == null ? void 0 : client.realtime.unsubscribe().then(() => {
          dispatch(_actions.subscriptionsAction.setSubscriptions([]));
        }).catch(tempErrorHandler));
      }
    },
    fetch: async collectionName => {
      await (client == null ? void 0 : client.collection(collectionName).getFullList(200).then(records => {
        dispatch(_actions.recordsAction.setRecords(collectionName, records));
      }).catch(tempErrorHandler));
    },
    create: async (collectionName, record) => {
      return await (client == null ? void 0 : client.collection(collectionName).create(record).catch(tempErrorHandler));
    },
    update: async (collectionName, recordId, record) => {
      return await (client == null ? void 0 : client.collection(collectionName).update(recordId, record).catch(tempErrorHandler));
    },
    delete: async (collectionName, recordId) => {
      return await (client == null ? void 0 : client.collection(collectionName).delete(recordId).catch(tempErrorHandler));
    }
  };
  (0, React.useEffect)(() => {
    if (props.collections) {
      props.collections.forEach(async collectionName => {
        await actions.fetch(collectionName);
        await actions.subscribe(collectionName);
      });
    }
    return () => {
      (async () => {
        await actions.unsubscribe();
      })();
    };
  }, [props.collections]);
  return /*#__PURE__*/React.createElement(ContentContext.Provider, {
    value: actions
  }, props.children);
};
exports.ContentProvider = ContentProvider;