"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.PocketbaseContext = exports.Pocketbase = void 0;
var React = _interopRequireWildcard(require("react"));
var _pocketbase = _interopRequireDefault(require("pocketbase"));
var _reactRedux = require("react-redux");
var _react2 = require("redux-persist/integration/react");
var _store = require("../store/store");
var _client = require("./client");
var _content = require("./content");
var _auth = require("./auth");
var _Storage = require("../service/Storage");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const PocketbaseContext = (0, React.createContext)(null);
exports.PocketbaseContext = PocketbaseContext;
const Pocketbase = props => {
  const [client, setClient] = React.useState(null);
  const [initialCollections, setInitialCollections] = React.useState();
  (0, React.useEffect)(() => {
    const client = new _pocketbase.default(props.serverURL);
    client.authStore.onChange(async () => {
      await _Storage.StorageService.set(_Storage.StorageService.Constants.COOKIE, client.authStore.exportToCookie());
      setInitialCollections([]);
      setInitialCollections(props.initialCollections);
    });
    _Storage.StorageService.get(_Storage.StorageService.Constants.COOKIE).then(cookie => {
      if (cookie) {
        client.authStore.loadFromCookie(cookie);
        setInitialCollections([]);
        setInitialCollections(props.initialCollections);
      }
      setClient(client);
    });
  }, [props.serverURL]);
  return client ? /*#__PURE__*/React.createElement(_client.ClientProvider, {
    client: client
  }, /*#__PURE__*/React.createElement(_reactRedux.Provider, {
    store: _store.store
  }, /*#__PURE__*/React.createElement(_react2.PersistGate, {
    persistor: _store.persistor
  }, /*#__PURE__*/React.createElement(_auth.AuthProvider, {
    webRedirectUrl: props.webRedirectUrl,
    mobileRedirectUrl: props.mobileRedirectUrl,
    openURL: props.openURL
  }, /*#__PURE__*/React.createElement(_content.ContentProvider, {
    collections: initialCollections
  }, props.children))))) : null;
};
exports.Pocketbase = Pocketbase;