"use strict";

exports.__esModule = true;
exports.updateRecord = exports.setRecords = exports.deleteRecords = exports.deleteRecord = exports.addRecords = exports.addRecord = void 0;
var ReduxType = _interopRequireWildcard(require("../types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const setRecords = (key, payload) => ({
  type: ReduxType.SET_RECORDS,
  key,
  payload
});
exports.setRecords = setRecords;
const addRecord = (key, payload) => ({
  type: ReduxType.ADD_RECORD,
  key,
  payload
});
exports.addRecord = addRecord;
const addRecords = (key, payload) => ({
  type: ReduxType.ADD_RECORDS,
  key,
  payload
});
exports.addRecords = addRecords;
const deleteRecord = (key, payload) => ({
  type: ReduxType.DELETE_RECORD,
  key,
  payload
});
exports.deleteRecord = deleteRecord;
const deleteRecords = (key, payload) => ({
  type: ReduxType.DELETE_RECORDS,
  key,
  payload
});
exports.deleteRecords = deleteRecords;
const updateRecord = (key, payload) => ({
  type: ReduxType.UPDATE_RECORD,
  key,
  payload
});
exports.updateRecord = updateRecord;