"use strict";

exports.__esModule = true;
exports.subscriptions = void 0;
var ReduxType = _interopRequireWildcard(require("../types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function appendSubscription(subscription, subscriptions) {
  return subscriptions.includes(subscription) ? subscriptions : [...subscriptions, subscription];
}
function deleteSubscription(subscription, subscriptions) {
  return subscriptions.filter(sub => sub !== subscription);
}
const subscriptions = (state = [], action) => {
  switch (action.type) {
    case ReduxType.SET_SUBSCRIPTIONS:
      if (Array.isArray(action.payload)) {
        return action.payload;
      }
    case ReduxType.ADD_SUBSCRIPTION:
      return appendSubscription(action.payload, state);
    case ReduxType.DELETE_SUBSCRIPTION:
      return deleteSubscription(action.payload, state);
    default:
      return state;
  }
};
exports.subscriptions = subscriptions;