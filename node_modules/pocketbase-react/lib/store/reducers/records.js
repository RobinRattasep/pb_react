"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.records = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var ReduxType = _interopRequireWildcard(require("../types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function appendRecord(record, records) {
  return [...records, record];
}
function appendRecords(recordsToAppend, records) {
  return [...records, ...recordsToAppend];
}
function updateRecord(record, records) {
  return records.map(r => {
    if (r.id === record.id) {
      return record;
    }
    return r;
  });
}
function deleteRecord(record, records) {
  return records.filter(r => r.id !== record.id);
}
function deleteRecords(recordsToDelete, records) {
  return records.filter(r => !recordsToDelete.includes(r));
}
const records = (state = {}, action) => {
  var _state$action$key;
  const list = (_state$action$key = state[action.key]) != null ? _state$action$key : [];
  switch (action.type) {
    case ReduxType.SET_RECORDS:
      if (Array.isArray(action.payload)) {
        return (0, _extends2.default)({}, state, {
          [action.key]: action.payload
        });
      }
    case ReduxType.ADD_RECORD:
      return (0, _extends2.default)({}, state, {
        [action.key]: appendRecord(action.payload, list)
      });
    case ReduxType.ADD_RECORDS:
      return (0, _extends2.default)({}, state, {
        [action.key]: appendRecords(action.payload, list)
      });
    case ReduxType.DELETE_RECORD:
      return (0, _extends2.default)({}, state, {
        [action.key]: deleteRecord(action.payload, list)
      });
    case ReduxType.DELETE_RECORDS:
      return (0, _extends2.default)({}, state, {
        [action.key]: deleteRecords(action.payload, list)
      });
    case ReduxType.UPDATE_RECORD:
      return (0, _extends2.default)({}, state, {
        [action.key]: updateRecord(action.payload, list)
      });
    default:
      return state;
  }
};
exports.records = records;